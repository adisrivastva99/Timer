import android.app.Notification
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.app.Service
import android.content.Intent
import android.os.Binder
import android.os.Build
import android.os.IBinder
import android.os.SystemClock
import androidx.core.app.NotificationCompat

class TimerService : Service() {

    private val binder = TimerBinder()
    private var startTime: Long = 0
    private var pausedTime: Long = 0
    private var isRunning = false
    private var isPaused = false

    override fun onBind(intent: Intent): IBinder {
        return binder
    }

    override fun onStartCommand(intent: Intent, flags: Int, startId: Int): Int {
        if (intent.action == "start_timer") {
            startTimer()
        } else if (intent.action == "pause_timer") {
            pauseTimer()
        } else if (intent.action == "resume_timer") {
            resumeTimer()
        }
        return super.onStartCommand(intent, flags, startId)
    }

    private fun startTimer() {
        if (!isRunning) {
            startTime = SystemClock.elapsedRealtime()
            isRunning = true
            isPaused = false
            updateNotification()
        }
    }

    private fun pauseTimer() {
        if (isRunning && !isPaused) {
            pausedTime = SystemClock.elapsedRealtime() - startTime
            isRunning = false
            isPaused = true
            updateNotification()
        }
    }

    private fun resumeTimer() {
        if (!isRunning && isPaused) {
            startTime = SystemClock.elapsedRealtime() - pausedTime
            isRunning = true
            isPaused = false
            updateNotification()
        }
    }

    private fun updateNotification() {
        val notificationManager = getSystemService(NOTIFICATION_SERVICE) as NotificationManager
        val notificationChannel = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            NotificationChannel("timer_channel", "Timer", NotificationManager.IMPORTANCE_DEFAULT)
        } else {
            null
        }

        val notification = NotificationCompat.Builder(this, "timer_channel")
            .setContentTitle("Timer")
            .setContentText(getElapsedTime())
            .setSmallIcon(R.drawable.ic_timer)
            .setOngoing(true)

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            notificationManager.createNotificationChannel(notificationChannel)
        }

        startForeground(1, notification.build())
    }

    private fun getElapsedTime(): String {
        val elapsedTime = SystemClock.elapsedRealtime() - startTime
        val hours = elapsedTime / 3600000
        val minutes = (elapsedTime % 3600000) / 60000
        val seconds = (elapsedTime % 60000) / 1000
        return String.format("%02d:%02d:%02d", hours, minutes, seconds)
    }

    inner class TimerBinder : Binder() {
        fun getService(): TimerService {
            return this@TimerService
        }
    }
}